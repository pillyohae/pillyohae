plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'jacoco'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

ext {
    springBootVersion = '3.4.0'
    springCloudVersion = '2023.0.0'
    testcontainersVersion = '1.19.3'

    // 기타 라이브러리 버전들
    versions = [
            jackson: '2.15.2',
            mysql: '8.2.0',
            redis: '4.4.6',
            commons: '3.13.0'
    ]
}

allprojects {
    group = 'com.pillyohae'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco' // 모든 모듈에서 코드 커버리지 측정

    java {
        sourceCompatibility = '17'
        targetCompatibility = '17'
    }

    dependencyManagement {
        imports {
            // Spring Boot BOM
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            // Spring Cloud BOM (필요한 경우)
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            // Testcontainers BOM
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }
    }

    // 모든 모듈 공통 의존성
    dependencies {

        // JWT
        implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // spring-security
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        implementation 'mysql:mysql-connector-java:8.0.32'
        runtimeOnly 'com.mysql:mysql-connector-j'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        implementation 'at.favre.lib:bcrypt:0.10.2'

        // QueryDSL
        implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        //caffeine
        implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

        //redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        // lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        //h2
        implementation 'com.h2database:h2'
        // AWS S3
        implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
        // Encoder
        implementation 'at.favre.lib:bcrypt:0.10.2'
        // Swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'


        testImplementation "org.mockito:mockito-core"

        // thymeleaf
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

        // json-simple
        implementation 'com.googlecode.json-simple:json-simple:1.1.1'

        // configuration
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


        // redission
        implementation 'org.redisson:redisson-spring-boot-starter:3.36.0'

        // jackson
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'
        implementation 'com.fasterxml.jackson.core:jackson-core:2.18.0'
        // 시간을 처리하기 위함
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

        // redis cahce
        implementation 'org.springframework.boot:spring-boot-starter-cache'




        // RabbitMq
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }


    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
        }
    }
}




// 통합 테스트 리포트 생성
tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.jacocoTestReport)

    additionalSourceDirs.from(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from(subprojects.sourceSets.main.output)
    executionData.from(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}
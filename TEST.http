###
POST http://localhost:8080/users/signup
Authorization:
Content-Type: application/json

{
  "name": "송정학",
  "email": "asdf@naver.com",
  "password": "Asdf1234@",
  "phoneNumber": "010-0000-0000",
  "postcode": "22222",
  "roadAddress": "인천시연수구컨벤시아대로",
  "detailAddress": "100-100",
  "role": "seller"
}
###
POST http://localhost:8080/users/signup
Authorization:
Content-Type: application/json

{
  "name": "송정학",
  "email": "asdf2@naver.com",
  "password": "Asdf1234@",
  "phoneNumber": "010-0000-0000",
  "postcode": "22222",
  "roadAddress": "인천시연수구컨벤시아대로",
  "detailAddress": "100-100",
  "role": "buyer"
}


###
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "email": "asdf@naver.com",
  "password": "Asdf1234@"
}

> {%
    // 응답 헤더에서 "Authorization" 또는 토큰 키를 가져옴
    const accessToken = response.headers.valueOf("Authorization");


    // 토큰이 있는 경우만 처리
    if (accessToken) {
        // Bearer 토큰 형식이 포함되어 있다면 분리
        const token = accessToken.replace("Bearer ", "").trim();

        // 환경 변수에 저장
        client.global.set("accessToken", token);
        console.log("Access Token:", token); // 디버깅용 로그
    } else {
        console.warn("Authorization header not found in response.");
    }

%}



###
POST http://localhost:8080/products
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "productName": "약",
  "category": "asdf@naver.com",
  "description": "Asdf1234@",
  "companyName": "a",
  "price":10000 ,
  "imageUrl": "a"  ,
  "status": "SELLING"


}
### 정액 기한 만료 유지 쿠폰 생성
POST http://localhost:8080/coupons
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "couponName": "Welcome Discount",
  "couponDescription": "Get a 10% discount on your first order!",
  "discountType": "FIXED_AMOUNT",
  "expiredType": "FIXED_DATE",
  "fixedAmount": 10000,
  "minimumPrice": 20000,
  "startAt": "2025-01-20T16:07:30",
  "expiredAt": "2025-02-20T23:59:59",
  "maxIssueCount": 1000
}
### 정액 일정 기간 유지 쿠폰 생성
POST http://localhost:8080/coupons
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "couponName": "Welcome Discount",
  "couponDescription": "Get a 10% discount on your first order!",
  "discountType": "FIXED_AMOUNT",
  "expiredType": "DURATION_BASED",
  "fixedAmount": 10000,
  "minimumPrice": 20000,
  "startAt": "2025-01-20T14:58:30",
  "expiredAt": "2025-02-20T23:59:59",
  "maxIssueCount": 1000,
  "couponLifetime": 3
}

### 정률 기한 만료 쿠폰 생성
POST http://localhost:8080/coupons
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "couponName": "Welcome Discount",
  "couponDescription": "Get a 10% discount on your first order!",
  "discountType": "PERCENTAGE",
  "expiredType": "FIXED_DATE",
  "fixedRate": 10,
  "maxDiscountAmount": 5000,
  "minimumPrice": 15000,
  "startAt": "2025-01-20T14:58:30",
  "expiredAt": "2025-02-20T23:59:59",
  "maxIssueCount": 1000
}


### 정률 일정 기간 유지 쿠폰 생성
POST http://localhost:8080/coupons
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "couponName": "Welcome Discount",
  "couponDescription": "Get a 10% discount on your first order!",
  "discountType": "PERCENTAGE",
  "expiredType": "DURATION_BASED",
  "fixedRate": 10,
  "maxDiscountAmount": 5000,
  "minimumPrice": 15000,
  "startAt": "2025-01-20T14:58:30",
  "expiredAt": "2025-02-20T23:59:59",
  "maxIssueCount": 1000,
  "couponLifetime": 3
}


###

POST http://localhost:8080/users/logout
Authorization: Bearer {{accessToken}}

> {%
// 로그아웃 성공 여부 확인
if (response.status === 200) {
    // 환경 변수에서 액세스 토큰 제거
    client.global.clear("accessToken");
    console.log("Access token has been removed from the environment.");
} else {
    console.error("Logout failed. Access token was not removed.");
}
%}

###

// buyer 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "email": "asdf2@naver.com",
  "password": "Asdf1234@"
}

> {%
    // 응답 헤더에서 "Authorization" 또는 토큰 키를 가져옴
    const accessToken = response.headers.valueOf("Authorization");


    // 토큰이 있는 경우만 처리
    if (accessToken) {
        // Bearer 토큰 형식이 포함되어 있다면 분리
        const token = accessToken.replace("Bearer ", "").trim();

        // 환경 변수에 저장
        client.global.set("accessToken", token);
        console.log("Access Token:", token); // 디버깅용 로그
    } else {
        console.warn("Authorization header not found in response.");
    }

%}
###
GET http://localhost:8080/coupons?couponStatus = INACTIVE
Authorization: Bearer {{accessToken}}

###
POST http://localhost:8080/coupons/10b7363a-184b-41fa-a4a5-c19156faf183/issue
Authorization: Bearer {{accessToken}}
###

###
GET http://localhost:8080/users/coupons?totalPrice = 15000
Authorization: Bearer {{accessToken}}



### 카트 생성
POST http://localhost:8080/carts
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "productId": 1,
  "quantity": 1
}

### 주문생성
POST http://localhost:8080/orders
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "productInfos": [
    {
      "productId": 1,
      "quantity": 3
    }
  ]
}

### 주문생성
POST http://localhost:8080/orders
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "productInfos": [
    {
      "productId": 1,
      "quantity": 3
    }
  ],
  "couponIds": [1]
}



### 판매자 주문 조회
GET http://localhost:8080/users/sellers/orders
Authorization: Bearer {{accessToken}}

### 판매자 주문 상세 조회
GET http://localhost:8080/users/sellers/orders/bd8462cc-828e-438b-8ee2-7eca284ad12e
Authorization: Bearer {{accessToken}}

### 구매자 주문 조회
GET http://localhost:8080/users/orders
Authorization: Bearer {{accessToken}}

### 구매자 상세 조회
GET http://localhost:8080/users/orders/c246ac35-2994-4c02-a62c-991320681bdd/orderItems
Authorization: Bearer {{accessToken}}


###
GET http://localhost:8080/orders/1ddee748-61ba-4c15-9bee-a57a98696aa6/toss/checkout
Authorization: Bearer {{accessToken}}

